@import "../../../scss/00_Abstracts/index";

ks-button {
    --border-radius: var(--ks-border-radius-sm);
    --shadow: var(--ks-shadow-sm);
    --focus-shadow: var(--ks-shadow-md);
    --disabled-shadow: var(--ks-shadow-inner);

    display: inline-block;
    position: relative;

    .button {
        text-decoration: none;
        line-height: 1;
        white-space: nowrap;
        text-align: center;
        position: relative;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
        text-align: center;
        display: block;
        @include r-var(--border-radius);
        @include shadow-var(--shadow);
        @include p(md);
        @include shadow(xs);
        @include transition($property: box-shadow);


        &:focus,
        &:hover:not(:disabled) {
            @include shadow-var(--focus-shadow);
            @include transition($property: box-shadow);
        }

        &:active:not(:disabled) {
            top: 1px;
            @include shadow(inner);
        }

        &:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            @include shadow-var(--disabled-shadow);

            * {
                pointer-events: none;
            }
        }

        .button-text {
            width: 100%;
            text-align: center;
        }

        &.size {
            &-xs {
                @include p(sm);
                @include font-size(xs);
            }

            &-sm {
                @include p(md);
                @include font-size(sm);
            }

            &-md {
                @include p(lg);
                @include font-size(sm);
            }

            &-lg {
                @include p(xl);
                @include font-size(md);
            }

            &-xl {
                @include p(xxl);
                @include font-size(lg);
            }
        }

        &.hollow {
            background-color: transparent;

            &:focus,
            &:hover:not(:disabled) {
                background-color: transparent;
            }

            &.size {
                &-xs {
                    padding: calc(#{spacing(sm) - spacing(xxxs)});
                }

                &-sm {
                    padding: calc(#{spacing(md) - spacing(xxxs)});
                }

                &-md {
                    padding: calc(#{spacing(lg) - spacing(xxxs)});
                }

                &-lg {
                    padding: calc(#{spacing(xl) - spacing(xxxs)});
                }

                &-xl {
                    padding: calc(#{spacing(xxl) - spacing(xxxs)});
                }
            }

        }

        &.clear {
            border: 0;
            background-color: transparent;
            @include shadow(none);

            &:focus,
            &:hover:not(:disabled) {
                border-color: transparent;
                background-color: transparent;
                @include shadow(none);
            }
        }

        &.link {
            background-color: transparent;
            display: inline-block;
            text-decoration: none;
            border: 0;
            overflow: visible;
            @include p(none);
            @include shadow(none);

            &:focus,
            &:hover:not(:disabled) {
                background-color: transparent;
                text-decoration: underline;
                @include shadow(none);
            }

            &:focus {
                @include default-outline();
            }
        }

        @each $color,
        $value in get-colors() {
            &.#{$color} {
                &.solid {
                    background-color: color-value($color);
                    background-image: linear-gradient(0deg,
                            color-value($color) 0%,
                            color-value($color, lighter) 100%);
                    color: text-color-value($color, dark);
                    text-shadow: 2px 2px 4px color-value($color, dark);
                    @include b(none);

                    .icon {
                        filter: drop-shadow(0 0 0.15rem color-value($color, darker));
                    }
                }

                &.hollow {
                    @include color($color);
                    @include b($color: $color);
                }

                &.clear {
                    color: color-value($color);
                }

                &.link {
                    @include color($color);
                    @include r(none);

                    &:focus,
                    &:hover:not(:disabled) {
                        @include color($color, light);
                    }
                }
            }
        }

        &.white {
            &.clear {
                color: white;
            }

            &.link {
                color: white;
            }
        }

        &.black {
            &.clear {
                color: black;
            }

            &.link {
                color: black;
            }
        }

        &.icon {
            &-left {
                flex-direction: row;

                .button-icon {
                    @include mr(sm);
                }
            }

            &-right {
                flex-direction: row-reverse;

                .button-icon {
                    @include ml(sm);
                }
            }
        }
    }
}
